name: Deploy

on:
  workflow_run:
    workflows: ["CI"]
    types: [completed]
    branches: [main,qa]

permissions:
  contents: read

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name == 'main' ? 'prod' : 'qa' }}
    env:
      ENVIRONMENT: ${{ github.ref_name == 'main' ? 'prod' : 'qa' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set app version
        id: set_app_version
        run: |
          VERSION=$(node -pe "require('./services/web_server/package.json').version")

          echo "APP_VERSION=${VERSION}" >> "$GITHUB_ENV"
          echo "APP_VERSION=${VERSION}"

      - name: Block indexing on qa
        if: env.ENVIRONMENT == 'qa'
        run: |
          echo "Injecting robots meta tag"
          INDEX_FILE=services/web_server/public/index.html
          TAG='<meta name="robots" content="noindex, nofollow, noarchive, nosnippet">'
          sed -i "s|<!-- __ROBOTS_TAG__ -->|$TAG|" "$INDEX_FILE"

      - name: Inject GA tag on prod
        if: env.ENVIRONMENT == 'prod' && vars.GA_TAG_ID != ''
        env:
          GA_TAG_ID: ${{ vars.GA_TAG_ID }}
        run: |
          echo "Injecting GA tag: $GA_TAG_ID"
          INDEX_FILE=services/web_server/public/index.html

          GA_TAG=$(cat <<EOF
              <script async src="https://www.googletagmanager.com/gtag/js?id=$GA_TAG_ID"></script>
              <script>
                  window.dataLayer = window.dataLayer || [];
                  function gtag(){dataLayer.push(arguments);}
                  gtag('js', new Date());
                  gtag('config', '$GA_TAG_ID');
              </script>
          EOF
          )

          awk -v replacement="$GA_TAG" '
            {
              if ($0 ~ /<!-- __GA_TAG_SCRIPT__ -->/) {
                print replacement
              } else {
                print $0
              }
            }
          ' "$INDEX_FILE" > tmp_index.html && mv tmp_index.html "$INDEX_FILE"

      - name: Inject schema.org JSON-LD on prod
        if: env.ENVIRONMENT == 'prod' && vars.GA_TAG_ID != ''
        env:
          CANONICAL_URL: ${{ vars.CANONICAL_URL }}
        run: |
          echo "Injecting schema.org JSON-LD with canonical URL: $CANONICAL_URL"
          INDEX_FILE=services/web_server/public/index.html

          TAG=$(cat <<EOF
              <script type="application/ld+json">
                  {
                    "@context": "https://schema.org",
                    "@type": "WebSite",
                    "name": "vivarium73",
                    "url": "$CANONICAL_URL"
                  }
              </script>
          EOF
          )

          awk -v replacement="$TAG" '
            {
              if ($0 ~ /<!-- __SCHEMA_ORG_JSON__ -->/) {
                print replacement
              } else {
                print $0
              }
            }
          ' "$INDEX_FILE" > tmp_index.html && mv tmp_index.html "$INDEX_FILE"

      - name: Inject canonical URL on prod
        if: env.ENVIRONMENT == 'prod' && vars.CANONICAL_URL != ''
        env:
          CANONICAL_URL: ${{ vars.CANONICAL_URL }}
        run: |
          echo "Injecting canonical URL: $CANONICAL_URL"
          INDEX_FILE=services/web_server/public/index.html
          TAG="<link rel=\"canonical\" href=\"$CANONICAL_URL\">"
          sed -i "s|<!-- __CANONICAL_URL__ -->|$TAG|" "$INDEX_FILE"

      - name: Clean or create a deploy directory
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ vars.DEPLOY_HOST }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: |
            DEPLOY_PATH="${{ vars.DEPLOY_PATH }}"

            mkdir -p "$DEPLOY_PATH"

            if [ -d "$DEPLOY_PATH" ]; then
              find "$DEPLOY_PATH" -mindepth 1 -maxdepth 1 ! -name data -exec rm -rf {} +
            fi

      - name: Copy code to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ vars.DEPLOY_HOST }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          source: "."
          target: "${{ vars.DEPLOY_PATH }}"

      - name: Build and start containers
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ vars.DEPLOY_HOST }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ${{ vars.DEPLOY_PATH }}

            cat <<'ENVVARS' > .env
            ENVIRONMENT=${{ env.ENVIRONMENT }}
            APP_VERSION=${{ env.APP_VERSION }}
            CORS_ORIGIN=${{ vars.CORS_ORIGIN }}
            WEB_PORT=${{ vars.WEB_PORT }}
            NN_PORT=${{ vars.NN_PORT }}
            WEBSOCKET_URL=${{ vars.WEBSOCKET_URL }}
            ENVVARS

            docker-compose down --volumes --remove-orphans
            docker-compose build
            docker-compose up -d

      - name: Health check
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ vars.DEPLOY_HOST }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: |
            for i in {1..3}; do
              if curl -sf http://localhost:${{ vars.WEB_PORT }}/api/health >/dev/null; then
                echo "Health check passed"
                exit 0
              fi
              echo "Waiting for server..."
              sleep 3
            done
            echo "Health check failed"
            exit 1
