name: Deploy

on:
  push:
    branches:
      - main
      - qa
    paths-ignore:
      - 'LICENSE'
      - '*.md'
      - 'docs/**'

jobs:
  test-web-server:
    name: Test Web Server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: cd services/web_server && npm ci

      - name: Run tests
        run: cd services/web_server && npm run test

  test-nn-service:
    name: Test NN Service
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: pip install -r services/nn_service/requirements.txt

      - name: Run tests
        run: pytest
        env:
          PYTHONPATH: .
        working-directory: services/nn_service

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [test-web-server, test-nn-service]
    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/qa' ? 'qa' : 'prod' }}
    environment: ${{ env.ENVIRONMENT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Clean remote directory (preserve /data)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ vars.HOST }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: |
            find ${{ vars.DEPLOY_PATH }} -mindepth 1 -maxdepth 1 ! -name data -exec rm -rf {} +

      - name: Copy code to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ vars.HOST }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          source: "."
          target: "${{ vars.DEPLOY_PATH }}"

      - name: Build public assets
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ vars.HOST }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ${{ vars.DEPLOY_PATH }}/services/web_server

            echo "Writing sitemap.txt"
            echo "${{ vars.CANONICAL_URL }}" > ./public/sitemap.txt

            echo "Injecting canonical URL"
            sed -i "s|__CANONICAL_URL__|${{ vars.CANONICAL_URL }}|g" ./public/index.html

            echo "Injecting GA tag"
            sed -i "s|__GA_TAG_ID__|${{ vars.GA_TAG_ID }}|g" ./public/index.html

      - name: Build and start containers
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ vars.HOST }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ${{ vars.DEPLOY_PATH }}

            echo "ENVIRONMENT=${{ github.environment }}" > .env
            echo "WEB_PORT=${{ vars.WEB_PORT }}" >> .env
            echo "NN_PORT=${{ vars.NN_PORT }}" >> .env
            echo "WEBSOCKET_URL=${{ vars.WEBSOCKET_URL }}" >> .env

            docker-compose down --volumes --remove-orphans
            docker-compose build
            docker-compose up -d

      - name: Health check
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ vars.HOST }}
          username: root
          key: ${{ secrets.SSH_KEY }}
          script: |
            for i in {1..3}; do
              if curl -sf http://localhost:${{ vars.WEB_PORT }}/api/health >/dev/null; then
                echo "Health check passed"
                exit 0
              fi
              echo "Waiting for server..."
              sleep 3
            done
            echo "Health check failed"
            exit 1
